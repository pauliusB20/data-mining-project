library(RKaggle)
library(factoextra)
library(ggplot2)
library(ggfortify)
library(cluster)
library(ggpubr)
library(klaR)
data<-RKaggle::get_dataset("urvishahir/electric-vehicle-specifications-dataset-2025")
numeric_data<-data[sapply(data,is.numeric)]#Leaving only numeric data for calculations of descriptive statistics
cov(numeric_data, use = "complete.obs") #Calculate variance covariace matrix dropping NA's
cor(numeric_data,use="complete.obs") ##Calculate correlation matrix dropping NA's
##First we have to run a diagnostic test to determine if we can do the clustering in the first place.
##I use hopkins statistic to for this.
get_clust_tendency(numeric_data,ceiling(nrow(numeric_data)/10)) #Hopkins statistic is 0.94 this means that there exist meaningful clusters.
#Now lets use principal components.
numeric_data<-na.omit(cbind(numeric_data,data["brand"])) #add brand back so we can color by brand
numeric_data[1:(length(colnames(numeric_data))-2)] #We want to select only numeric data
cars.pca<-prcomp(numeric_data[1:(length(colnames(numeric_data))-2)],center=T,scale.=T) #compute principal components
cars.pca.plot<-autoplot(cars.pca,data=na.omit(numeric_data),colour="brand") #Plot principal components along with labels
Principal_component_data<-cars.pca$x[,1:2] #Select first 2 principal components for plotting
get_clust_tendency(Principal_component_data,ceiling(nrow(Principal_component_data)/10))  #Just checking again to make sure (Hopkins statistic is 0.86 meaningful clusters exist)
##Now lets use the elbow method to get how many clusters we need
fviz_nbclust(Principal_component_data, kmeans, method = "wss")
fviz_nbclust(Principal_component_data,kmeans,method="silhouette")
##Both of these methods indicate 3-4 splits lets use 3 splits.
km.res<-kmeans(Principal_component_data,3) ##We perform k means clustering
plot_1<-fviz_cluster(km.res,geom="point",data=Principal_component_data)
plot_1
agglo.clust <- agnes(Principal_component_data,method="complete",metric = "euclidean") ##Agglomerative hierarchical clustering
sub1<-cutree(agglo.clust,k=3) #Cut tree at 3 clusters
Plot_1_hierarchical <- fviz_cluster(list(data = Principal_component_data, cluster = sub1))
Plot_1_hierarchical ##Plotting clustering
##Checking the adequacy of silhoutte.
mean(silhouette(sub1,dist = dist(Principal_component_data))[,3]) ##Mean Silhoute coefficient for kmeans
mean(silhouette(km.res$cluster,dist=dist(Principal_component_data))[,3]) ## Mean silhoutte coefficient for hierarchical
sil=silhouette(sub1,dist = dist(Principal_component_data))[,3]
mean(sapply(sil, function(x) x<0 ))*100
PCA
Principal_component_data
op1<-optics(Principal_component_data,eps=1,minpts=5)
install.packages("dbscan")
library(dbscan)
op1<-optics(Principal_component_data,eps=1,minpts=5)
install.packages("dbscan")
library(dbscan)
op1<-optics(Principal_component_data,eps=1,minpts=5)
library("dbscan")
install.packages("dbscan")
library(dbscan)
op1<-optics(Principal_component_data,eps=1,minpts=5)
op1<-Optics(Principal_component_data,eps=1,minpts=5)
?dbscan
?optics
data_filtered
data["Car_size"]=size*(data$height_mm)/100
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data["Charging_time"]<-data$battery_capacity_kWh/(0.95*data$fast_charging_power_kw_dc)
size<-(data$length_mm)/100*(data$width_mm)/100
data["Car_size"]=size*(data$height_mm)/100
data_filtered<-data %>%
select(top_speed_kmh,Car_size,Charging_time,efficiency_wh_per_km,torque_nm,acceleration_0_100_s) %>%
data_filtered
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data["Charging_time"]<-data$battery_capacity_kWh/(0.95*data$fast_charging_power_kw_dc)
size<-(data$length_mm)/100*(data$width_mm)/100
data["Car_size"]=size*(data$height_mm)/100
data_filtered<-data %>%
select(top_speed_kmh,Car_size,Charging_time,efficiency_wh_per_km,torque_nm,acceleration_0_100_s) %>%
data_filtered
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data["Charging_time"]<-data$battery_capacity_kWh/(0.95*data$fast_charging_power_kw_dc)
size<-(data$length_mm)/100*(data$width_mm)/100
data["Car_size"]=size*(data$height_mm)/100
data_filtered<-data %>%
select(top_speed_kmh,Car_size,Charging_time,efficiency_wh_per_km,torque_nm,acceleration_0_100_s)
data_filtered
hist(data_filtered$efficiency_wh_per_km, main="Efficiency Histogram",xlab="Efficiency")
data_filtered["efficiency_wh_per_km"]<-log(data_filtered["efficiency_wh_per_km"])
data_filtered<-drop_na(data_filtered)
data_filtered
hist(data_filtered$efficiency_wh_per_km,main="log Efficiency Histogram",xlab="Efficiency")
qqnorm(data_filtered$efficiency, pch = 1, frame = FALSE)
qqline(data_filtered$efficiency)
hist(data_filtered$efficiency_wh_per_km, main="Efficiency Histogram",xlab="Efficiency")
data_filtered["efficiency_wh_per_km"]<-log(data_filtered["efficiency_wh_per_km"])
data_filtered<-drop_na(data_filtered)
data_filtered
hist(data_filtered$efficiency_wh_per_km,main="log Efficiency Histogram",xlab="Efficiency")
source("~/Desktop/Data mining/data-mining-project/dataset/Data_mining.r")
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data["Charging_time"]<-data$battery_capacity_kWh/(0.95*data$fast_charging_power_kw_dc)
size<-(data$length_mm)/100*(data$width_mm)/100
data["Car_size"]=size*(data$height_mm)/100
data_filtered<-data %>%
select(top_speed_kmh,Car_size,Charging_time,efficiency_wh_per_km,torque_nm,acceleration_0_100_s)
data_filtered
hist(data_filtered$efficiency_wh_per_km, main="Efficiency Histogram",xlab="Efficiency")
data_filtered["efficiency_wh_per_km"]<-log(data_filtered["efficiency_wh_per_km"])
data_filtered<-drop_na(data_filtered)
data_filtered
hist(data_filtered$efficiency_wh_per_km,main="log Efficiency Histogram",xlab="Efficiency")
qqnorm(data_filtered$efficiency, pch = 1, frame = FALSE)
qqline(data_filtered$efficiency)
hist(data_filtered$efficiency_wh_per_km,main="log Efficiency Histogram",xlab="Efficiency")
hist(data_filtered$efficiency_wh_per_km,main="log Efficiency Histogram",xlab="Efficiency")
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data["Charging_time"]<-data$battery_capacity_kWh/(0.95*data$fast_charging_power_kw_dc)
size<-(data$length_mm)/100*(data$width_mm)/100
data["Car_size"]=size*(data$height_mm)/100
data_filtered<-data %>%
select(top_speed_kmh,Car_size,Charging_time,efficiency_wh_per_km,torque_nm,acceleration_0_100_s)
data_filtered
hist(data_filtered$efficiency_wh_per_km, main="Efficiency Histogram",xlab="Efficiency")
qqnorm(data_filtered$efficiency, pch = 1, frame = FALSE)
qqline(data_filtered$efficiency)
qqnorm(data_filtered$efficiency, pch = 1, frame = FALSE)
qqline(data_filtered$efficiency)
data
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data
data
data_numeric<-df[, sapply(df, is.numeric)]
data_numeric<-data[, sapply(df, is.numeric)]
data_numeric
library(dplyr)
library(ggplot2)
library(tidymodels)
library(ranger)
library(randomForest)
library(gbm)
data<-read.csv("/Users/simonasarliukas/Desktop/Data mining/electric_vehicles_spec_2025.csv.csv")
head(data)
data_numeric<-data[, sapply(data, is.numeric)]
data_numeric
data_numeric %>%
pivot_longer(-y, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = value, y = y)) +
geom_point(alpha = 0.6) +
facet_wrap(~variable, scales = "free_x") +
theme_minimal()
data_numeric
data_numeric
df %>%
pivot_longer(-efficiency_wh_per_km, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = value, y = efficiency_wh_per_km)) +
geom_point(alpha = 0.6) +
facet_wrap(~variable, scales = "free_x") +
theme_minimal()
data_numeric<-data[, sapply(data, is.numeric)]
data_numeric %>%
pivot_longer(-efficiency_wh_per_km, names_to = "variable", values_to = "value") %>%
ggplot(aes(x = value, y = efficiency_wh_per_km)) +
geom_point(alpha = 0.6) +
facet_wrap(~variable, scales = "free_x") +
theme_minimal()
